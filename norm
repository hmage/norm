#!/usr/bin/env bash
set -eE

DIRNAME=`dirname "$0"`
READLINK=`readlink "$0" || true`
LINKDIRNAME=`dirname "$READLINK"`
NORMDIR="$LINKDIRNAME"
[ ! "${LINKDIRNAME:0:1}" = "/" ] && NORMDIR="$DIRNAME/$LINKDIRNAME"
NORMDIR=`cd "$NORMDIR"; pwd`

. "$NORMDIR"/norm_common

PREFIX="$DEFAULT_PREFIX"

# we could be running in environment with broken locales
export LANG=C LC_ALL=C

## root users must use distro's package manager
[ $EUID == "0" ] && log "Error: I will not run for root user." && exit 1


## curl availability check
unset DOWNLOADER

if hash aria2c 2>/dev/null; then
    DOWNLOADER=aria2c
elif hash wget 2>/dev/null; then
    DOWNLOADER=curl
elif hash wget 2>/dev/null; then
    DOWNLOADER=wget
fi

if [[ -z $DOWNLOADER ]]; then
    log "Error: couldn't find a tool to download source code"
    log "You need either curl or wget in your PATH"
    log "Can't compile anything, sorry"
    exit 1
fi

usage() {
    echo "Usage:"
    echo "    $OURNAME install <formula> [formula ...]   -- install formula(s)"
    echo "    $OURNAME reinstall <formula> [formula ...] -- reinstall already installed formula(s)"
    echo "    $OURNAME list                              -- list all installed formulas"
    echo "    $OURNAME ldd                               -- check for dynamic dependencies outside of prefix"
    echo "    $OURNAME sub                               -- subshell with all prefix variables set"
    echo "    $OURNAME prefix                            -- print current prefix"
    echo "    $OURNAME run ...                           -- execute a command with prefix compile flags set"
    echo
    echo "Common options:"
    echo "    -p <prefix> -- full path to custom prefix (default: '$DEFAULT_PREFIX')"
    echo
    echo "Install options:"
    echo "    -f          -- force install, same as reinstall command"
    echo "    -k          -- after successful install, keep source code in \$PREFIX/tmp/compile"
    echo
    echo "ldd options:"
    echo "    -v          -- show list of files that will be fed to ldd"
    echo "    -q          -- output only ldd results"
    echo
    echo "Maintainer commands:"
    echo "    $OURNAME testall  -- compile every formula and save the result into separate logfiles"
}

cmd_prefix() {
    echo "$PREFIX"
}

cmd_cppflags() {
    QUIET=1 setup_prefix "$PREFIX"
    echo "$CPPFLAGS"
}

cmd_ldflags() {
    QUIET=1 setup_prefix "$PREFIX"
    echo "$LDFLAGS"
}

cmd_install() {
    ## cc sanity check
    if ! test_cc_func "stdio.h" 'printf("Hello, world!\n");'; then
        log "Error: your compiler can't compile!"
        log "Check that your have it installed correctly"
        exit 1
    fi

    ## parse arguments
    local force
    norm_keep_sources=
    while [ $# -gt 0 ]; do
        case "$1" in
        --with-*)    set_with    "${1#--with-}" ;;
        --without-*) set_without "${1#--without-}" ;;
        -f|--force)  readonly force=-f ;;
        -k|--keep|--keep-sources) readonly norm_keep_sources=1;;
        (--) shift; break;;
        (-*) echo "$0: error -- unregoznied option $1" 1>&2; exit 64;;
        (*) break;;
        esac
        shift
    done

    ## --with-* and --without-* can be added anywhere else in the command line
    local argument
    for argument; do
        [[ "$argument" == --with-* ]] && set_with "${argument#--with-}"
        [[ "$argument" == --without-* ]] && set_without "${argument#--without-}"
    done
    [ -z "$1" ] && log "Need formula names" && exit 64
    [ -n "$force" ] && log "Forcing reinstall of formulas: $@" \
                    || log "Installing formulas: $@"
    setup_traps
    setup_prefix "$PREFIX"
    ## ensure we have proper gzip
    if ! hash gzip 2>/dev/null; then
        log "Required utility gzip not found, will install it too"
        set -- gzip "$@"
    else
        TEMPFILE=`mktemp`
        gzip --best -c "$TEMPFILE" >/dev/null 2>/dev/null || BUSYBOXGZIP=1
        rm -f "$TEMPFILE"
    fi
    if [ -n "$BUSYBOXGZIP" ]; then
        log "Busybox gzip detected, will install our own"
        set -- gzip "$@"
    fi

    ## ensure we have proper patch
    if ! hash patch 2>/dev/null; then
        log "Required utility patch not found, will install it too"
        set -- patch "$@"
    else
        patch -l -i /dev/null 2>/dev/null || BUSYBOXPATCH=1
        patch -f -i /dev/null 2>/dev/null || BUSYBOXPATCH=1
    fi
    if [ -n "$BUSYBOXPATCH" ]; then
        log "Busybox patch detected, will install our own"
        set -- patch "$@"
    fi

    ## make needs to be installed first
    if ! hash make 2>/dev/null; then
        log "Required utility make not found, will install it too"
        set -- make "$@"
    fi
    for FORMULA; do
        [[ "$FORMULA" == --* ]] && continue ## ignore flags
        compile_formula $force "$FORMULA"
    done
    log "You can find $@ in $PREFIX"
}

cmd_reinstall() {
    cmd_install -f "$@"
}

cmd_sub() {
    log "Creating subshell so you can compile and link against norm libs"
    setup_prefix "$PREFIX"
    $SHELL -i
}

cmd_run() {
    log "Running $@ in a subshell with command line flags set"
    setup_prefix "$PREFIX"
    export CGO_LDFLAGS="$LDFLAGS"
    export CGO_CPPFLAGS="$CPPFLAGS"
    "$@"
}

cmd_ldd() {
    local LDDOPTS=()
    while getopts "qv" opt; do
        case $opt in
        v)
            LDDOPTS+=(-v)
            ;;
        q)
            LDDOPTS+=(-q)
            ;;
        esac
    done
    "$NORMDIR"/norm-ldd "${LDDOPTS[@]}" "$PREFIX"
}

cmd_list() {
    local STATEDIR="$PREFIX"/var/norm
    local FILES=("$STATEDIR"/*installed)
    local FORMULAS=()
    for file in "${FILES[@]}"; do
        [ ! -e "$file" ] && continue
        local filename="${file##*/}"
        local formula_name="${filename%.installed}"
        formula_name=`echo "$formula_name" | perl -pe 's/\.[0-9a-f]{40}//'`
        in_array FORMULAS "$formula_name" || FORMULAS+=("$formula_name")
    done
    local FORMULAS_SORTED=($(printf '%s\n' "${FORMULAS[@]}"|sort))
    for formula in "${FORMULAS_SORTED[@]}"; do
        local dependencies=()
        local maxelapsed=()
        ## old-style
        for file in "$STATEDIR/$formula".*.installed; do
            [ ! -e "$file" ] && continue
            dependencies+=($(cat "$file" | awk '{print $NF}'))
        done
        ## new-style
        for file in "$STATEDIR/$formula".installed; do
            [ ! -e "$file" ] && continue
            dependencies+=($(cat "$file" | awk '{print $9}'))
            maxelapsed+=($(cat "$file" | awk '{print $8}'))
        done
        dependencies=`printf "%s\n" "${dependencies[@]}"|sort -u|xargs`
        maxelapsed=`printf "%s\n" "${maxelapsed[@]}"|sort -nr|head -n1`
        [ -n "$dependencies" ] && dependencies="- Needed for $dependencies"
        [ -n "$maxelapsed" ] && printf -v maxelapsed "%ds " "$maxelapsed"
        printf "%-25s %7s%s\n" "$formula" "$maxelapsed" "$dependencies"
    done
}

cmd_dot() {
    local STATEDIR="$PREFIX"/var/norm
    local FILES=("$STATEDIR"/*installed)
    local FORMULAS=()
    for file in "${FILES[@]}"; do
        [ ! -e "$file" ] && continue
        local filename="${file##*/}"
        local formula_name="${filename%.installed}"
        in_array FORMULAS "$formula_name" || FORMULAS+=("$formula_name")
    done
    local FORMULAS_SORTED=($(printf '%s\n' "${FORMULAS[@]}"|sort))
    echo 'digraph norm {'
    for formula in "${FORMULAS_SORTED[@]}"; do
        local FILENAME="$STATEDIR/$formula".installed
        local dependencies=$(cat "$FILENAME" | awk '{print $9}' | sort -u|xargs)
        if [[ -n $dependencies ]]; then
            for dependency in $dependencies; do
                echo \"$dependency\" "->" \"$formula\"
            done
        else
            echo \"$formula\"
        fi
    done
    echo '}'
}

cmd_update() {
    pushd "$NORMDIR"
    git pull
    popd
}

cmd_upgrade() {
    local STATEDIR="$PREFIX"/var/norm
    local FORMULAS=()
    for file in "$STATEDIR"/*installed; do
        [ -e "$file" ] || continue
        local formula=`basename -- "$file" .installed | perl -pe 's/\.[0-9a-f]{40}$//'`
        ## TODO: add SHA1SUM check
        FORMULAS+=($formula)
    done
    cmd_install "$@" "${FORMULAS[@]}"
}

cmd_testall() {
    pushd $NORMDIR
    ./norm-testall "$@"
    popd
}

while getopts ":p:" opt; do
    case $opt in
    p)
        PREFIX="$OPTARG"
        [ "${PREFIX:0:1}" != "/" ] && PREFIX="$PWD"/"$OPTARG"
        ;;
    \?)
        echo "Invalid option: -$OPTARG" >&2
        usage
        exit 64
        ;;
    :)
        echo "Option -$OPTARG requires an argument." >&2
        usage
        exit 64
        ;;
    esac
done

shift $((OPTIND-1))
OPTIND=1

[ -z "$1" ] && echo "No command specified" >&2 && usage && exit 64

if declare -f cmd_"$1" >/dev/null; then
    COMMAND=cmd_"$1"
    shift
    "$COMMAND" "$@"
else
    echo "Unknown command: $1" >&2
    usage
    exit 64
fi
